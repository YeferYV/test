# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  # - build
  # - test
  - release
  # - deploy

include:
  # - .gitlab/workflows/docker-publish.yml
  - .gitlab/workflows/release.yml

# docker-build:
#   stage: build
#   # `trigger` is the keyword to create a child pipeline
#   trigger:
#     # Include the configuration file of the child pipeline
#     include: .gitlab/workflows/docker-publish.yml
#     # With this strategy, the parent only succeed if the child succeed too
#     strategy: depend
#   # Run this job in a branch where a Dockerfile exists
#   rules:
#     - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
#       exists:
#         - Dockerfile

# build-job:       # This job runs in the build stage, which runs first. stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."
#
# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - echo "Code coverage is 90%"

# release_job:
#   stage: release
#   # `trigger` is the keyword to create a child pipeline
#   trigger:
#     # Include the configuration file of the child pipeline
#     include: .gitlab/workflows/release.yml
#     # With this strategy, the parent only succeed if the child succeed too
#     strategy: depend
#   rules:
#     - if: $CI_COMMIT_TAG                 # Run this job when a tag is created

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
